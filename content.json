{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"BryantChang","url":"http://yoursite.com"},"pages":[{"title":"关于我","date":"2018-05-30T05:08:49.000Z","updated":"2018-05-30T05:23:37.921Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"目前供职于美团点评”技术工程与基础数据平台”部门，本科与硕士毕业于北京工业大学计算机学院，研究方向为大数据处理。"}],"posts":[{"title":"log4J进阶","slug":"log4j-adv","date":"2018-05-30T06:37:31.000Z","updated":"2018-05-30T11:31:02.528Z","comments":true,"path":"2018/05/30/log4j-adv/","link":"","permalink":"http://yoursite.com/2018/05/30/log4j-adv/","excerpt":"Log4j组件Log4j的进阶使用","text":"Log4j组件Log4j的进阶使用 Logger–具体的日志记录实例 LoggerConfig–与Logger类似 Appender—日志的输出位置 Log4j1.x 的层次关系是通过 Loggers 之间的关系保持的。而 Log4j2.x是通过 LoggerConfig 对象来维持这种层次关系的。 继承关系一个LoggerConfig 的名字是另外一个 LoggerConfig 名字 加上 . 和一些后缀字符。 那么这个 LoggerConfig 是另外的 LoggerConfig 的子类。 类似于 java 的 package 路径。 例如 : 一个 名称为 “com.foo”的 LoggerConfig 是 一个名称为 “com.foo.Bar” 的LoggerConfig 的父类。 其中Root LoggerConfig居于最顶层。与Root LoggerConfig关联的的Logger可以通过如下方式获得 1Logger logger = LogManager.getRootLogger();","categories":[{"name":"Log4j","slug":"Log4j","permalink":"http://yoursite.com/categories/Log4j/"}],"tags":[{"name":"Log4j","slug":"Log4j","permalink":"http://yoursite.com/tags/Log4j/"}]},{"title":"log4j2初识","slug":"log4j2","date":"2018-05-30T06:09:16.000Z","updated":"2018-05-30T10:12:29.373Z","comments":true,"path":"2018/05/30/log4j2/","link":"","permalink":"http://yoursite.com/2018/05/30/log4j2/","excerpt":"Log4J简介本博客将对Log4J的作用以及简单用法进行介绍","text":"Log4J简介本博客将对Log4J的作用以及简单用法进行介绍 What来源：百度百科 Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。 Hello World在maven工程的pom.xml下添加依赖 12345678910111213141516171819202122232425262728&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.25&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-web&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-api&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-core&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 在工程的resource目录下创建配置文件log4j2.xml并编辑 12345678910111213&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;configuration status=\"info\"&gt; &lt;appenders&gt; &lt;Console name=\"Console\" target=\"SYSTEM_OUT\" &gt; &lt;PatternLayout pattern=\"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %level %logger&#123;36&#125; - %msg%n\"/&gt; &lt;/Console&gt; &lt;/appenders&gt; &lt;loggers&gt; &lt;root level=\"info\"&gt; &lt;appender-ref ref=\"Console\"/&gt; &lt;/root&gt; &lt;/loggers&gt;&lt;/configuration&gt; now 正式上代码 1234567891011package com.bryantchang;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class Test &#123; private static Logger logger = LoggerFactory.getLogger(Test.class); public static void main(String[] args) &#123; logger.info(\"Hello World\"); &#125;&#125; 看效果 大功告成","categories":[{"name":"Log4j","slug":"Log4j","permalink":"http://yoursite.com/categories/Log4j/"}],"tags":[{"name":"Log4j","slug":"Log4j","permalink":"http://yoursite.com/tags/Log4j/"}]},{"title":"Hexo简介","slug":"hexointro","date":"2018-05-30T05:31:47.000Z","updated":"2018-05-30T10:12:33.178Z","comments":true,"path":"2018/05/30/hexointro/","link":"","permalink":"http://yoursite.com/2018/05/30/hexointro/","excerpt":"由于之前的博客管理上过于繁琐，所以决定使用Hexo来进行博客的书写。Hexo可基于npm进行安装，安装十分方便，下面简要介绍安装部署方法。","text":"由于之前的博客管理上过于繁琐，所以决定使用Hexo来进行博客的书写。Hexo可基于npm进行安装，安装十分方便，下面简要介绍安装部署方法。 安装Hexo1sudo npm install -g hexo 初始化Hexo创建一个文件夹存放博客，进入到这个文件夹，执行： 1hexo init 完成后执行： 1npm install 构建静态页面1hexo g 本地查看1hexo s 随后可在http://localhost:4000查看 关联Git首先在git上创建自己博客的仓库随后修改_config.yml1234deploy: type:git repository: git@github.com:yourname/projectname branch: master 最后通过下面命令提交到git上 1hexo d 添加图片： 1&#123;% asset_img imgs/helloworld_re.png helloworld结果 %&#125;","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"我的第一篇博客","slug":"firstblog","date":"2018-05-30T04:58:46.000Z","updated":"2018-05-30T05:17:31.653Z","comments":true,"path":"2018/05/30/firstblog/","link":"","permalink":"http://yoursite.com/2018/05/30/firstblog/","excerpt":"","text":"新的开始，新的气象之前的博客管理起来感觉过于繁琐，因此重新学习了Hexo，使用这个工具搭建了新的博客，后期会将前面的文章进行迁移，敬请期待。","categories":[],"tags":[{"name":"欢迎","slug":"欢迎","permalink":"http://yoursite.com/tags/欢迎/"}]}]}